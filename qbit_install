#!/bin/bash

source src/qbit_user
source src/qbit_service
source src/qbit_rclone
source src/qbit_rss
source src/qbit_rules
source src/qbit_conf

# Define timezone
sudo timedatectl set-timezone America/Sao_Paulo

# Instala dependencias
apt install unzip -y; apt install zip -y;
add-apt-repository ppa:qbittorrent-team/qbittorrent-stable -y
apt install qbittorrent-nox -y
curl https://rclone.org/install.sh | sudo bash
mkdir -p /home/$USER

# Download da config do rclone
if [ ${rcloneDownloadConfig} = "on" ]; then
  mkdir -p ${rcloneFilesDir}/config/
  wget $rcloneConfig -P ${rcloneFilesDir}/config/
fi

# Inicia script personalizado
qbit_onStart

# Configura e monta remotes do rclone
qbit_rclone

# Configura service do qBittorrent
qbit_service

# Cria pastas necessárias
mkdir -p /home/$USER/qBittorrent/downloads/
mkdir -p /home/$USER/qBittorrent/files/
mkdir -p /home/$USER/qBittorrent/files_incomplete/
mkdir -p /home/$USER/qBittorrent/config/
mkdir -p /home/$USER/qBittorrent/config/rss/

if [ ${autoTorrents} = "on" ]; then
  # Download dos arquivos .torrent
  cd /home/$USER/qBittorrent/files/
  rclone copy ${filesRemote}:torrents_latest.zip ${PWD} --config ${rcloneFilesDir}/config/rclone.conf
  unzip torrents_latest.zip
  rm torrents_latest.zip

  if [ ${crontabEnable} = "on" ]; then
    # Cria symlinks
    ln -s $moviesPath$cronMovies /home/$USER/qBittorrent/downloads/
    ln -s $tvPath$cronTv /home/$USER/qBittorrent/downloads/
    ln -s $epsPath$cronEps /home/$USER/qBittorrent/downloads/
  fi
fi

# Zipar e salvar os .torrents na nuvem.
if [ ${torrentsFileEnable} = "on" ]; then
  echo "cd /home/$USER/qBittorrent/files/"                                                                                                            >  /usr/bin/uploadFiles
  echo "zip -r torrents_latest.zip *.torrent"                                                                                                         >> /usr/bin/uploadFiles
  echo "rclone moveto ${filesRemote}:torrents_latest.zip ${filesRemote}:\$(date +\"%d-%m-%Y\").zip --config ${rcloneFilesDir}/config/rclone.conf"     >> /usr/bin/uploadFiles
  echo "sleep 60"                                                                                                                                     >> /usr/bin/uploadFiles
  echo "rclone move torrents_latest.zip ${filesRemote}: --checksum --config ${rcloneFilesDir}/config/rclone.conf"                                     >> /usr/bin/uploadFiles
  chmod a+x /usr/bin/uploadFiles

  # Cria regra no crontab
  crontab -l > mycron
  echo "0 */2 * * * /usr/bin/uploadFiles  >/dev/null 2>&1"                                                                                            >> mycron
  crontab mycron
  rm mycron
fi

# Adiciona conf do script
qbit_conf

# Download da WebUI
# if [ $webUI = "on" ]; then
#   git clone --single-branch --branch latest-release https://github.com/WDaan/VueTorrent.git /home/$USER/qBittorrent/config/webUI/VueTorrent/
# fi

# Se ativado, adiciona regras e RSS
qbit_rss
qbit_rules

# Inicia qBittorrent
if [ ${autoTorrents} = "on" ]; then
  qbittorrent-nox -d --profile=/home/$USER --webui-port=${portWeb} --category=autoTorrents --skip-hash-check --save-path=/home/$USER/qBittorrent/downloads/ /home/$USER/qBittorrent/files/*.torrent
else
  qbittorrent-nox -d --profile=/home/$USER --webui-port=${portWeb}
fi

# Service qBittorrent
systemctl enable qbittorrent-${portWeb}.service

# Inicia script personalizado
qbit_onEnd

# Cores
green=$(tput setaf 2)
blue=$(tput setaf 6)
white=$(tput setaf 7)
normal=$(tput sgr0)
format="%s${normal}\n"

if [ $rcloneDownloadConfig = "on" ]; then
  printf "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  printf $format "${green}Instalação concluída."
  printf "\n"
  printf $format "${white}Acesse: ${blue}http://${ip}:${portWeb}/"
  printf $format "${white}Usuário: ${blue}admin"
  printf $format "${white}Senha: ${blue}adminadmin"
  printf "\n\n"
else
  printf "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  printf $format "${green}Instalação concluída."
  printf "\n"
  printf $format "${white}Acesse: ${blue}http://${ip}:${portWeb}/"
  printf $format "${white}Usuário: ${blue}admin"
  printf $format "${white}Senha: ${blue}adminadmin"
  printf "\n"
  printf $format "${white}Você não adicionou sua config do rclone no script,"
  printf $format "${white}portanto devera fazer isso agora."
  printf "\n"
  printf $format "${white}Execute o comando: ${blue}rclone config --config /home/$USER/rclone/config/rclone.conf"
  printf $format "${white}E conforme definido no script, você precisa criar os remotes com os seguintes nomes;"
  printf "\n"
  printf $format "  ${blue}$moviesRemote ${white}para os filmes."
  printf $format "  ${blue}$tvRemote ${white}para as séries"
  printf $format "  ${blue}$epsRemote ${white}para os episódios avulsos."
  if [ $torrentsFileEnable = "on" ]; then
    printf $format "  ${blue}$filesRemote ${white}para os arquivos .torrent."
    printf "\n"
  else
    printf "\n"
  fi
  printf $format "${white}Após ter configurado execute o comando;"
  printf $format "${blue}sudo systemctl start {${tvRemote}.service,${moviesRemote}.service,${epsRemote}.service}"
  printf "\n\n"
fi